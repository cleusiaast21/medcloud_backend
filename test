import pandas as pd
from sklearn.model_selection import train_test_split
import pickle
import os
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.utils import resample  # For resampling

# Load your dataset
df = pd.read_csv('./dataset.csv')

# Separate symptom and disease columns
symptom_columns = [col for col in df.columns if not col.startswith('D_')]
disease_columns = [col for col in df.columns if col.startswith('D_')]

# Create and save a model for each disease
for disease in disease_columns:
    X = df[symptom_columns]  # symptoms as features
    Y = df[disease]          # target is the specific disease
    
    df_balanced = pd.concat([X, Y], axis=1)

    # Separar classes majoritárias e minoritárias
    majority_class = df_balanced[df_balanced[disease] == 0]
    minority_class = df_balanced[df_balanced[disease] == 1]

    # Aplicar oversampling na classe minoritária
    minority_class_upsampled = resample(minority_class, 
                                        replace=True,  # Sample with replacement
                                        n_samples=len(majority_class),  # Match number in majority class
                                        random_state=42)  # Seed for reproducibility

    # Concatenar classes majoritárias e minoritárias balanceadas
    df_balanced = pd.concat([majority_class, minority_class_upsampled])

    # Separar X e Y após balanceamento
    X = df_balanced.drop(columns=[disease])
    Y_balanced = df_balanced[disease]

    # Dividir o conjunto de dados em treinamento e teste
    X_train, X_test, Y_train, Y_test = train_test_split(X, Y_balanced, test_size=0.3, random_state=42)

    # Normalizar os dados
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)

    # Train the model using KNN
    model = KNeighborsClassifier(n_neighbors=10)
    model.fit(X_train, Y_train)
    
    Y_pred = model.predict(X_test)
    accuracy = accuracy_score(Y_test, Y_pred)
    print(f'Accurácia para {disease}: {accuracy:.2f}')
    
    directory = 'modelsPython'
    filename = f'model_{disease}.pkl'
    file_path = os.path.join(directory, filename)

    # Create the directory if it doesn't exist
    if not os.path.exists(directory):
        os.makedirs(directory)

    # Save the model to the specified path
    with open(file_path, 'wb') as file:
        pickle.dump(model, file)
        
